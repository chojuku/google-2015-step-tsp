#!/usr/bin/env python3
#coding:UTF-8
import sys
import math
import random

from common import print_solution, read_input

def distance(city1, city2):
    return math.sqrt((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2)

def initcenters(centers,n,cities):
    for i in range(n):
        centers[i] = cities[i*n]
    return centers

def calc_new_centers(centernum,centercities,n,N,cities):
    for t in range(N):
        for i in range(n):
            if(centernum[t] == cities[i*n]):
                sum[i] += (cities[t]-centercities[i])**2
               # sum[i][1] += (cities[t][1]-centercities[i][1])**2
    newcentercities[i] = (sum[i] / n)  + centercities[i]        
    return newcentercities

def kmeans(cities):
    N = len(cities)    
    dist = [[0] * N for i in range(N)]
    for i in range(N):
        for j in range(N):
            dist[i][j] = dist[j][i] = distance(cities[i], cities[j])
    n = (int)(math.sqrt(N))
    #centercities = [[0 for k in range(2)] for i in range(n)]
    centercities = initcenters(centercities,n,cities)
    for i in range(n):
        print centercities
    for s in range(100):
        for t in range(N):
            centernum[t] = min(centercities,key = (int)(distance(centercities,cities[t])))
        newcenters = calc_new_centers(centernum,centercities,n,N,cities)
        if(distance(centercities,newcenters)<0.5):
            break
        cuentercities = newcenters
    return centernum
    



def solve(cities):
    N = len(cities)
    dist = [[0] * N for i in range(N)]
    for i in range(N):
        for j in range(N):
            dist[i][j] = dist[j][i] = distance(cities[i], cities[j])
    current_city = 0
    unvisited_cities = set(range(1, N))
    solution = [current_city]
    

    def distance_from_current_city(to):#dont change indent!
        return dist[current_city][to]

    while unvisited_cities:
        next_city = min(unvisited_cities, key=distance_from_current_city)
        unvisited_cities.remove(next_city)
        solution.append(next_city)
        current_city = next_city
    return solution

#def merge(solutions):
    

if __name__ == '__main__':
    assert len(sys.argv) > 1
    #solution = solve(read_input(sys.argv[1]))
    means = kmeans(read_input(sys.argv[1]))
    solution = solve(means)
   # solution += solve(means)
    print_solution(solution)
